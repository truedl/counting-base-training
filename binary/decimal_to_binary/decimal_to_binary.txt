We'll convert the decimal number 100 into binary.
To convert decimal-base number into binary-base number we need to modulo decimal-base number by 2 and divide it too by 2 but remove the floating point (like the // operator in Python does, I'll use it here).

Let's take an example in the "algebraic" way.
x is the decimal number.

x = some_decimal_number
x % 2
x = x // 2

The result of the modulo is 0 for example, we'll add it to the start of our "counting".
Now our counting is 0, let's do the modulo again:

x % 2
x = x // 2

The result of the modulo is 1 now, let's add it to our "counting" of the binary-base from the **left** side.
Now our "counting" of the binary-base looks like that: 10

If you don't got the "counting" already then if there's more 0 in our modulo then the result will be: 010

Now let's do all the math on one decimal-base number, as I said 100.

100 % 2 == 0
100 // 2 == 50
binary-base = 0

50 % 2 == 0
50 // 2 == 25
binary-base == 00

25 % 2 == 1
25 // 2 == 12
binary-base == 100

12 % 2 == 0
12 // 2 == 6
binary-base == 0100

6 % 2 == 0
6 // 2 == 3
binary-base == 00100

3 % 2 == 1
3 // 2 == 1
binary-base == 100100

1 % 2 == 1
1 // 2 == 0
binary-base == 1100100

Now the final result is 1100100.
0b1100100 == 100 (decimal)

Note: We mark binary numbers by "0b" at the start. 0b100 != 100 (decimal) but 0b100 == 4 (decimal)

Now you're ready to train your knowledge on the "battlefield", go to "implement_code_by_yourself.txt" and read the exercise instructions :).
